/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	PRINT_OPTIONS = "Print_options_version 6\
range_start 0ps\
range_end 1.0us\
width 1\
names_percentage 25\
comments 1\
grid_lines 1\
time_bars 1\
name_every_page 0\
expand_groups 0\
print_all 1\
print_row_height 100";
	DATA_OFFSET = 0.0;
	DATA_DURATION = 10000.0;
	SIMULATION_TIME = 10000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("alu_ena")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("FETCH")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("io_output")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("io_output[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "io_output";
}

SIGNAL("io_output[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "io_output";
}

SIGNAL("io_output[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "io_output";
}

SIGNAL("io_output[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "io_output";
}

SIGNAL("io_output[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "io_output";
}

SIGNAL("io_output[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "io_output";
}

SIGNAL("io_output[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "io_output";
}

SIGNAL("io_output[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "io_output";
}

SIGNAL("rd")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("addr")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 6;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("addr[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "addr";
}

SIGNAL("addr[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "addr";
}

SIGNAL("addr[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "addr";
}

SIGNAL("addr[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "addr";
}

SIGNAL("addr[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "addr";
}

SIGNAL("addr[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "addr";
}

SIGNAL("accum")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("accum[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "accum";
}

SIGNAL("accum[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "accum";
}

SIGNAL("accum[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "accum";
}

SIGNAL("accum[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "accum";
}

SIGNAL("accum[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "accum";
}

SIGNAL("accum[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "accum";
}

SIGNAL("accum[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "accum";
}

SIGNAL("accum[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "accum";
}

TRANSITION_LIST("alu_ena")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 21.128;
		NODE
		{
			REPEAT = 124;
			LEVEL 1 FOR 10.019;
			LEVEL 0 FOR 69.981;
		}
		LEVEL 1 FOR 10.019;
		LEVEL 0 FOR 48.853;
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1000;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 5.0;
		}
	}
}

TRANSITION_LIST("FETCH")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 42.279;
		NODE
		{
			REPEAT = 124;
			LEVEL 1 FOR 40.034;
			LEVEL 0 FOR 39.966;
		}
		LEVEL 1 FOR 37.721;
	}
}

TRANSITION_LIST("io_output[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 111.329;
		NODE
		{
			REPEAT = 2;
			LEVEL X FOR 10.0;
			LEVEL Z FOR 70.0;
		}
		LEVEL X FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 69.947;
			LEVEL 1 FOR 10.053;
		}
		NODE
		{
			REPEAT = 58;
			LEVEL Z FOR 69.947;
			LEVEL X FOR 10.053;
		}
		LEVEL Z FOR 149.947;
		NODE
		{
			REPEAT = 29;
			LEVEL X FOR 10.053;
			LEVEL Z FOR 69.947;
		}
		LEVEL X FOR 10.053;
		LEVEL Z FOR 149.947;
		NODE
		{
			REPEAT = 27;
			LEVEL X FOR 10.053;
			LEVEL Z FOR 69.947;
		}
		LEVEL X FOR 10.053;
		LEVEL Z FOR 38.671;
	}
}

TRANSITION_LIST("io_output[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 111.319;
		NODE
		{
			REPEAT = 2;
			LEVEL X FOR 10.0;
			LEVEL Z FOR 70.0;
		}
		LEVEL X FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 69.947;
			LEVEL 1 FOR 10.053;
		}
		NODE
		{
			REPEAT = 59;
			LEVEL Z FOR 69.947;
			LEVEL X FOR 10.053;
		}
		LEVEL Z FOR 149.947;
		NODE
		{
			REPEAT = 29;
			LEVEL X FOR 10.053;
			LEVEL Z FOR 69.947;
		}
		LEVEL X FOR 10.053;
		LEVEL Z FOR 149.947;
		NODE
		{
			REPEAT = 27;
			LEVEL X FOR 10.053;
			LEVEL Z FOR 69.947;
		}
		LEVEL X FOR 10.053;
		LEVEL Z FOR 38.681;
	}
}

TRANSITION_LIST("io_output[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 110.659;
		NODE
		{
			REPEAT = 2;
			LEVEL X FOR 10.0;
			LEVEL Z FOR 70.0;
		}
		LEVEL X FOR 10.0;
		LEVEL Z FOR 69.941;
		LEVEL 1 FOR 10.059;
		NODE
		{
			REPEAT = 60;
			LEVEL Z FOR 69.941;
			LEVEL X FOR 10.059;
		}
		LEVEL Z FOR 149.941;
		NODE
		{
			REPEAT = 29;
			LEVEL X FOR 10.059;
			LEVEL Z FOR 69.941;
		}
		LEVEL X FOR 10.059;
		LEVEL Z FOR 149.941;
		NODE
		{
			REPEAT = 27;
			LEVEL X FOR 10.059;
			LEVEL Z FOR 69.941;
		}
		LEVEL X FOR 10.059;
		LEVEL Z FOR 39.341;
	}
}

TRANSITION_LIST("io_output[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 111.097;
		NODE
		{
			REPEAT = 2;
			LEVEL X FOR 10.0;
			LEVEL Z FOR 70.0;
		}
		LEVEL X FOR 10.0;
		NODE
		{
			REPEAT = 61;
			LEVEL Z FOR 69.948;
			LEVEL X FOR 10.052;
		}
		LEVEL Z FOR 149.948;
		NODE
		{
			REPEAT = 29;
			LEVEL X FOR 10.052;
			LEVEL Z FOR 69.948;
		}
		LEVEL X FOR 10.052;
		LEVEL Z FOR 149.948;
		NODE
		{
			REPEAT = 27;
			LEVEL X FOR 10.052;
			LEVEL Z FOR 69.948;
		}
		LEVEL X FOR 10.052;
		LEVEL Z FOR 38.903;
	}
}

TRANSITION_LIST("io_output[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 110.861;
		NODE
		{
			REPEAT = 2;
			LEVEL X FOR 10.0;
			LEVEL Z FOR 70.0;
		}
		LEVEL X FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 69.949;
			LEVEL 0 FOR 10.051;
		}
		NODE
		{
			REPEAT = 59;
			LEVEL Z FOR 69.949;
			LEVEL X FOR 10.051;
		}
		LEVEL Z FOR 149.949;
		NODE
		{
			REPEAT = 29;
			LEVEL X FOR 10.051;
			LEVEL Z FOR 69.949;
		}
		LEVEL X FOR 10.051;
		LEVEL Z FOR 149.949;
		NODE
		{
			REPEAT = 27;
			LEVEL X FOR 10.051;
			LEVEL Z FOR 69.949;
		}
		LEVEL X FOR 10.051;
		LEVEL Z FOR 39.139;
	}
}

TRANSITION_LIST("io_output[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 111.067;
		NODE
		{
			REPEAT = 2;
			LEVEL X FOR 10.0;
			LEVEL Z FOR 70.0;
		}
		LEVEL X FOR 10.0;
		LEVEL Z FOR 69.948;
		LEVEL 0 FOR 10.052;
		LEVEL Z FOR 69.948;
		LEVEL 1 FOR 10.052;
		NODE
		{
			REPEAT = 59;
			LEVEL Z FOR 69.948;
			LEVEL X FOR 10.052;
		}
		LEVEL Z FOR 149.948;
		NODE
		{
			REPEAT = 29;
			LEVEL X FOR 10.052;
			LEVEL Z FOR 69.948;
		}
		LEVEL X FOR 10.052;
		LEVEL Z FOR 149.948;
		NODE
		{
			REPEAT = 27;
			LEVEL X FOR 10.052;
			LEVEL Z FOR 69.948;
		}
		LEVEL X FOR 10.052;
		LEVEL Z FOR 38.933;
	}
}

TRANSITION_LIST("io_output[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 111.028;
		NODE
		{
			REPEAT = 2;
			LEVEL X FOR 10.0;
			LEVEL Z FOR 70.0;
		}
		LEVEL X FOR 10.0;
		LEVEL Z FOR 69.939;
		LEVEL 1 FOR 10.061;
		NODE
		{
			REPEAT = 60;
			LEVEL Z FOR 69.939;
			LEVEL X FOR 10.061;
		}
		LEVEL Z FOR 149.939;
		NODE
		{
			REPEAT = 29;
			LEVEL X FOR 10.061;
			LEVEL Z FOR 69.939;
		}
		LEVEL X FOR 10.061;
		LEVEL Z FOR 149.939;
		NODE
		{
			REPEAT = 27;
			LEVEL X FOR 10.061;
			LEVEL Z FOR 69.939;
		}
		LEVEL X FOR 10.061;
		LEVEL Z FOR 38.972;
	}
}

TRANSITION_LIST("io_output[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 111.361;
		NODE
		{
			REPEAT = 2;
			LEVEL X FOR 10.0;
			LEVEL Z FOR 70.0;
		}
		LEVEL X FOR 10.0;
		LEVEL Z FOR 69.925;
		LEVEL 1 FOR 10.075;
		NODE
		{
			REPEAT = 60;
			LEVEL Z FOR 69.925;
			LEVEL X FOR 10.075;
		}
		LEVEL Z FOR 149.925;
		NODE
		{
			REPEAT = 29;
			LEVEL X FOR 10.075;
			LEVEL Z FOR 69.925;
		}
		LEVEL X FOR 10.075;
		LEVEL Z FOR 149.925;
		NODE
		{
			REPEAT = 27;
			LEVEL X FOR 10.075;
			LEVEL Z FOR 69.925;
		}
		LEVEL X FOR 10.075;
		LEVEL Z FOR 38.639;
	}
}

TRANSITION_LIST("rd")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 71.045;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 10.033;
			LEVEL 0 FOR 10.0;
			LEVEL X FOR 30.0;
			LEVEL 0 FOR 29.967;
		}
		NODE
		{
			REPEAT = 61;
			LEVEL 1 FOR 10.033;
			LEVEL 0 FOR 9.967;
			LEVEL 1 FOR 30.033;
			LEVEL 0 FOR 29.967;
		}
		LEVEL 1 FOR 10.033;
		LEVEL 0 FOR 69.967;
		NODE
		{
			REPEAT = 30;
			LEVEL 1 FOR 10.033;
			LEVEL 0 FOR 9.967;
			LEVEL 1 FOR 30.033;
			LEVEL 0 FOR 29.967;
		}
		LEVEL 1 FOR 10.033;
		LEVEL 0 FOR 69.967;
		NODE
		{
			REPEAT = 28;
			LEVEL 1 FOR 10.033;
			LEVEL 0 FOR 9.967;
			LEVEL 1 FOR 30.033;
			LEVEL 0 FOR 29.967;
		}
		LEVEL 1 FOR 8.955;
	}
}

TRANSITION_LIST("rst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.463;
		LEVEL 1 FOR 7.873;
		LEVEL 0 FOR 9991.664;
	}
}

TRANSITION_LIST("addr[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 83.409;
		NODE
		{
			REPEAT = 31;
			LEVEL 1 FOR 39.88;
			LEVEL 0 FOR 40.12;
		}
		LEVEL 1 FOR 2599.88;
		LEVEL 0 FOR 40.12;
		LEVEL 1 FOR 2439.88;
		LEVEL 0 FOR 40.12;
		LEVEL 1 FOR 2316.591;
	}
}

TRANSITION_LIST("addr[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 84.081;
		NODE
		{
			REPEAT = 15;
			LEVEL X FOR 39.959;
			LEVEL 0 FOR 40.041;
		}
		LEVEL X FOR 39.845;
		NODE
		{
			REPEAT = 15;
			LEVEL 1 FOR 40.161;
			LEVEL X FOR 39.839;
		}
		LEVEL 1 FOR 40.161;
		LEVEL X FOR 39.953;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 39.933;
			LEVEL 1 FOR 40.067;
		}
		LEVEL 0 FOR 39.933;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 80.114;
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 39.839;
				LEVEL 1 FOR 120.161;
			}
			LEVEL 0 FOR 39.839;
			LEVEL 1 FOR 80.114;
			LEVEL 0 FOR 199.933;
			NODE
			{
				REPEAT = 12;
				LEVEL 1 FOR 40.067;
				LEVEL 0 FOR 39.933;
			}
		}
		LEVEL 1 FOR 80.114;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 39.839;
			LEVEL 1 FOR 120.161;
		}
		LEVEL 0 FOR 39.839;
		LEVEL 1 FOR 116.074;
	}
}

TRANSITION_LIST("addr[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 682.643;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 40.15;
				LEVEL 0 FOR 39.85;
			}
			LEVEL 1 FOR 40.15;
			LEVEL 0 FOR 679.85;
		}
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 40.15;
				LEVEL 0 FOR 39.85;
			}
			LEVEL 1 FOR 40.15;
			LEVEL 0 FOR 679.85;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 40.15;
				LEVEL 0 FOR 39.85;
			}
			LEVEL 1 FOR 40.15;
			LEVEL 0 FOR 599.85;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 40.15;
			LEVEL 0 FOR 39.85;
		}
		LEVEL 1 FOR 40.15;
		LEVEL 0 FOR 679.85;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 40.15;
			LEVEL 0 FOR 39.85;
		}
		LEVEL 1 FOR 37.357;
	}
}

TRANSITION_LIST("addr[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 362.358;
		NODE
		{
			REPEAT = 6;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 40.037;
				LEVEL 0 FOR 39.963;
			}
			LEVEL 1 FOR 40.037;
			LEVEL 0 FOR 359.963;
		}
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 40.037;
				LEVEL 0 FOR 39.963;
			}
			LEVEL 1 FOR 40.037;
			LEVEL 0 FOR 359.963;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 40.037;
				LEVEL 0 FOR 39.963;
			}
			LEVEL 1 FOR 40.037;
			LEVEL 0 FOR 279.963;
			NODE
			{
				REPEAT = 2;
				NODE
				{
					REPEAT = 3;
					LEVEL 1 FOR 40.037;
					LEVEL 0 FOR 39.963;
				}
				LEVEL 1 FOR 40.037;
				LEVEL 0 FOR 359.963;
			}
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 40.037;
			LEVEL 0 FOR 39.963;
		}
		LEVEL 1 FOR 40.037;
		LEVEL 0 FOR 359.963;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 40.037;
			LEVEL 0 FOR 39.963;
		}
		LEVEL 1 FOR 37.642;
	}
}

TRANSITION_LIST("addr[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 83.368;
		LEVEL X FOR 39.928;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 40.109;
			LEVEL 1 FOR 199.891;
			LEVEL 0 FOR 40.109;
			LEVEL 1 FOR 39.891;
		}
		LEVEL 0 FOR 40.109;
		LEVEL 1 FOR 199.891;
		LEVEL 0 FOR 40.072;
		LEVEL X FOR 39.928;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 40.109;
				LEVEL 1 FOR 199.891;
				LEVEL 0 FOR 40.109;
				LEVEL 1 FOR 39.891;
			}
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 80.037;
				LEVEL 1 FOR 159.963;
				LEVEL 0 FOR 40.109;
				LEVEL 1 FOR 39.891;
			}
			LEVEL 0 FOR 80.037;
			LEVEL 1 FOR 159.963;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 40.109;
			LEVEL 1 FOR 199.891;
			LEVEL 0 FOR 40.109;
			LEVEL 1 FOR 39.891;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 80.037;
			LEVEL 1 FOR 159.963;
			LEVEL 0 FOR 40.109;
			LEVEL 1 FOR 39.891;
		}
		LEVEL 0 FOR 80.037;
		LEVEL 1 FOR 36.667;
	}
}

TRANSITION_LIST("addr[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 122.358;
		LEVEL 1 FOR 79.946;
		LEVEL 0 FOR 80.054;
		NODE
		{
			REPEAT = 15;
			LEVEL 1 FOR 79.946;
			LEVEL 0 FOR 40.06;
			LEVEL X FOR 39.994;
		}
		LEVEL 1 FOR 79.946;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 40.12;
			LEVEL 1 FOR 119.88;
		}
		LEVEL 0 FOR 120.12;
		NODE
		{
			REPEAT = 14;
			LEVEL 1 FOR 119.88;
			LEVEL 0 FOR 40.12;
		}
		LEVEL 1 FOR 119.88;
		LEVEL 0 FOR 120.12;
		NODE
		{
			REPEAT = 13;
			LEVEL 1 FOR 119.88;
			LEVEL 0 FOR 40.12;
		}
		LEVEL 1 FOR 119.88;
		LEVEL 0 FOR 37.696;
	}
}

TRANSITION_LIST("accum[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 10000.0;
	}
}

TRANSITION_LIST("accum[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 10000.0;
	}
}

TRANSITION_LIST("accum[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 10000.0;
	}
}

TRANSITION_LIST("accum[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 10000.0;
	}
}

TRANSITION_LIST("accum[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 10000.0;
	}
}

TRANSITION_LIST("accum[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 10000.0;
	}
}

TRANSITION_LIST("accum[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 10000.0;
	}
}

TRANSITION_LIST("accum[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 10000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "rst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "alu_ena";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "FETCH";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "accum";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
	CHILDREN = 5, 6, 7, 8, 9, 10, 11, 12;
}

DISPLAY_LINE
{
	CHANNEL = "accum[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "accum[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "accum[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "accum[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "accum[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "accum[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "accum[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "accum[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "io_output";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
	CHILDREN = 14, 15, 16, 17, 18, 19, 20, 21;
}

DISPLAY_LINE
{
	CHANNEL = "io_output[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "io_output[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "io_output[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "io_output[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "io_output[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "io_output[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "io_output[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "io_output[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 13;
}

DISPLAY_LINE
{
	CHANNEL = "rd";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 22;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "addr";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 23;
	TREE_LEVEL = 0;
	CHILDREN = 24, 25, 26, 27, 28, 29;
}

DISPLAY_LINE
{
	CHANNEL = "addr[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 23;
}

DISPLAY_LINE
{
	CHANNEL = "addr[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 23;
}

DISPLAY_LINE
{
	CHANNEL = "addr[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 23;
}

DISPLAY_LINE
{
	CHANNEL = "addr[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 23;
}

DISPLAY_LINE
{
	CHANNEL = "addr[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 23;
}

DISPLAY_LINE
{
	CHANNEL = "addr[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 23;
}

TIME_BAR
{
	TIME = 15875;
	MASTER = TRUE;
}
;
